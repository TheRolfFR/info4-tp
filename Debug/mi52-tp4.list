
mi52-tp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000904  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aa8  08000aa8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa8  08000aa8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa8  08000aa8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  08000ab4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000ab4  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c10  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005f5  00000000  00000000  00021c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  00022350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e36a  00000000  00000000  00022428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000158f  00000000  00000000  00030792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053722  00000000  00000000  00031d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00085443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  00085498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a80 	.word	0x08000a80

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000a80 	.word	0x08000a80

080001d4 <init_pwm>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void init_pwm() {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0

	// 4 étapes par (1/2) => 0.5s => 500ms
	// la duree totale de 0% à 100% sera : etapes * numerateur / denominateur en secondes

	// ATTENTION METTRE LES NOMBRES LES PLUS PETITS SINON OVERFLOW
	uint16_t numerateur = 1;
 80001da:	2301      	movs	r3, #1
 80001dc:	81fb      	strh	r3, [r7, #14]
	uint16_t denominateur = 2;
 80001de:	2302      	movs	r3, #2
 80001e0:	81bb      	strh	r3, [r7, #12]

	// activer GPIO A
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001e2:	4b4f      	ldr	r3, [pc, #316]	; (8000320 <init_pwm+0x14c>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e6:	4a4e      	ldr	r2, [pc, #312]	; (8000320 <init_pwm+0x14c>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	; 0x30

	// clear mode PA5
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80001ee:	4b4d      	ldr	r3, [pc, #308]	; (8000324 <init_pwm+0x150>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a4c      	ldr	r2, [pc, #304]	; (8000324 <init_pwm+0x150>)
 80001f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001f8:	6013      	str	r3, [r2, #0]

	// PA5 alternate function (2) : AF01 TIM2 channel 1 (1)
	GPIOA->MODER |= GPIO_MODER_MODER5_1;
 80001fa:	4b4a      	ldr	r3, [pc, #296]	; (8000324 <init_pwm+0x150>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a49      	ldr	r2, [pc, #292]	; (8000324 <init_pwm+0x150>)
 8000200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000204:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~GPIO_AFRH_AFRH5; // 0
 8000206:	4b47      	ldr	r3, [pc, #284]	; (8000324 <init_pwm+0x150>)
 8000208:	6a1b      	ldr	r3, [r3, #32]
 800020a:	4a46      	ldr	r2, [pc, #280]	; (8000324 <init_pwm+0x150>)
 800020c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000210:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AFRH_AFRH5_0; // 1
 8000212:	4b44      	ldr	r3, [pc, #272]	; (8000324 <init_pwm+0x150>)
 8000214:	6a1b      	ldr	r3, [r3, #32]
 8000216:	4a43      	ldr	r2, [pc, #268]	; (8000324 <init_pwm+0x150>)
 8000218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800021c:	6213      	str	r3, [r2, #32]

	// activer timer 5
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800021e:	4b40      	ldr	r3, [pc, #256]	; (8000320 <init_pwm+0x14c>)
 8000220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000222:	4a3f      	ldr	r2, [pc, #252]	; (8000320 <init_pwm+0x14c>)
 8000224:	f043 0308 	orr.w	r3, r3, #8
 8000228:	6413      	str	r3, [r2, #64]	; 0x40

	// on peut mettre le prescaler à 1 car notre valeur rentrera dans 32 bits
	TIM5->PSC = 0;
 800022a:	4b3f      	ldr	r3, [pc, #252]	; (8000328 <init_pwm+0x154>)
 800022c:	2200      	movs	r2, #0
 800022e:	629a      	str	r2, [r3, #40]	; 0x28

	// IMPORTANT NE PAS METTRE DE PARENTHESES SUR LE QUOTIENT SINON 0
	// TIM5 32 bits: max(ARR) = 2^32 - 1
	TIM5->ARR = SystemCoreClock*numerateur/denominateur-1;
 8000230:	89fb      	ldrh	r3, [r7, #14]
 8000232:	4a3e      	ldr	r2, [pc, #248]	; (800032c <init_pwm+0x158>)
 8000234:	6812      	ldr	r2, [r2, #0]
 8000236:	fb02 f203 	mul.w	r2, r2, r3
 800023a:	89bb      	ldrh	r3, [r7, #12]
 800023c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000240:	4a39      	ldr	r2, [pc, #228]	; (8000328 <init_pwm+0x154>)
 8000242:	3b01      	subs	r3, #1
 8000244:	62d3      	str	r3, [r2, #44]	; 0x2c

	// activer timer 2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000246:	4b36      	ldr	r3, [pc, #216]	; (8000320 <init_pwm+0x14c>)
 8000248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024a:	4a35      	ldr	r2, [pc, #212]	; (8000320 <init_pwm+0x14c>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6413      	str	r3, [r2, #64]	; 0x40

	// 10kHz
	// TIM2 32 bits: max(ARR) = 2^32 - 1
	uint16_t prescaler = 1;
 8000252:	2301      	movs	r3, #1
 8000254:	817b      	strh	r3, [r7, #10]
	uint16_t freq = 10000;
 8000256:	f242 7310 	movw	r3, #10000	; 0x2710
 800025a:	813b      	strh	r3, [r7, #8]
	uint32_t autoreload = SystemCoreClock / (prescaler * freq);
 800025c:	4b33      	ldr	r3, [pc, #204]	; (800032c <init_pwm+0x158>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	897a      	ldrh	r2, [r7, #10]
 8000262:	8939      	ldrh	r1, [r7, #8]
 8000264:	fb01 f202 	mul.w	r2, r1, r2
 8000268:	fbb3 f3f2 	udiv	r3, r3, r2
 800026c:	607b      	str	r3, [r7, #4]
	TIM2->PSC = prescaler - 1;
 800026e:	897b      	ldrh	r3, [r7, #10]
 8000270:	1e5a      	subs	r2, r3, #1
 8000272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = autoreload - 1;
 8000278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3b01      	subs	r3, #1
 8000280:	62d3      	str	r3, [r2, #44]	; 0x2c


	// Mettre en mode PWM1
	TIM2->CCMR1 &= ~TIM_CCMR1_CC1S; // Le mode output compare est 0
 8000282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028c:	f023 0303 	bic.w	r3, r3, #3
 8000290:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1M; // clear output mode
 8000292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80002a0:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  110 << TIM_CCMR1_OC1M_Pos; // Mettre le mode output en PWM1
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ac:	f443 63dc 	orr.w	r3, r3, #1760	; 0x6e0
 80002b0:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1CE;
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002c0:	6193      	str	r3, [r2, #24]

	// activer sortie
	TIM2->CCER &= ~TIM_CCER_CC1E;
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002cc:	f023 0301 	bic.w	r3, r3, #1
 80002d0:	6213      	str	r3, [r2, #32]
	TIM2->CCER |=  TIM_CCER_CC1E;
 80002d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6213      	str	r3, [r2, #32]

	// premiere intensité lumineuse 0%
	TIM2->CCR1 = 0;
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e6:	2200      	movs	r2, #0
 80002e8:	635a      	str	r2, [r3, #52]	; 0x34

	// on oublie pas de activer les compteurs
	TIM2->CR1 |= TIM_CR1_CEN;
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6013      	str	r3, [r2, #0]
	TIM5->CR1 |= TIM_CR1_CEN;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <init_pwm+0x154>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <init_pwm+0x154>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6013      	str	r3, [r2, #0]

	// on génère un évènement de reset de compteur
	TIM5->EGR |= TIM_EGR_UG;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <init_pwm+0x154>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <init_pwm+0x154>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6153      	str	r3, [r2, #20]
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40000c00 	.word	0x40000c00
 800032c:	20000000 	.word	0x20000000

08000330 <init_capture>:

void init_capture() {
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	// le USER BUTTON est en pull up
	// donc quand pressé fait haut->bas->haut

    // activer gpio B
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000334:	4b4a      	ldr	r3, [pc, #296]	; (8000460 <init_capture+0x130>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a49      	ldr	r2, [pc, #292]	; (8000460 <init_capture+0x130>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6313      	str	r3, [r2, #48]	; 0x30

    // PB7 alternate function (2) : AF02 TIM4 channel 2 (2)
	GPIOB->MODER &= ~GPIO_MODER_MODER7_Msk;
 8000340:	4b48      	ldr	r3, [pc, #288]	; (8000464 <init_capture+0x134>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a47      	ldr	r2, [pc, #284]	; (8000464 <init_capture+0x134>)
 8000346:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800034a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER7_1;
 800034c:	4b45      	ldr	r3, [pc, #276]	; (8000464 <init_capture+0x134>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a44      	ldr	r2, [pc, #272]	; (8000464 <init_capture+0x134>)
 8000352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000356:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~GPIO_AFRH_AFRH7; // 0
 8000358:	4b42      	ldr	r3, [pc, #264]	; (8000464 <init_capture+0x134>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a41      	ldr	r2, [pc, #260]	; (8000464 <init_capture+0x134>)
 800035e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000362:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  GPIO_AFRH_AFRH7_1; // 2
 8000364:	4b3f      	ldr	r3, [pc, #252]	; (8000464 <init_capture+0x134>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a3e      	ldr	r2, [pc, #248]	; (8000464 <init_capture+0x134>)
 800036a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800036e:	6213      	str	r3, [r2, #32]

    // activer timer 4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000370:	4b3b      	ldr	r3, [pc, #236]	; (8000460 <init_capture+0x130>)
 8000372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000374:	4a3a      	ldr	r2, [pc, #232]	; (8000460 <init_capture+0x130>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

	// Mettre la vitesse du Timer 4
	// TIM4  bits: max(ARR) = 2^16 - 1
	TIM4->PSC = 0; // prescaler to 1
 800037c:	4b3a      	ldr	r3, [pc, #232]	; (8000468 <init_capture+0x138>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 0xFFFF;
 8000382:	4b39      	ldr	r3, [pc, #228]	; (8000468 <init_capture+0x138>)
 8000384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000388:	62da      	str	r2, [r3, #44]	; 0x2c

	// activer les modifications CCMR2
	TIM4->CCER &= ~TIM_CCER_CC1E;
 800038a:	4b37      	ldr	r3, [pc, #220]	; (8000468 <init_capture+0x138>)
 800038c:	6a1b      	ldr	r3, [r3, #32]
 800038e:	4a36      	ldr	r2, [pc, #216]	; (8000468 <init_capture+0x138>)
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC2E;
 8000396:	4b34      	ldr	r3, [pc, #208]	; (8000468 <init_capture+0x138>)
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	4a33      	ldr	r2, [pc, #204]	; (8000468 <init_capture+0x138>)
 800039c:	f023 0310 	bic.w	r3, r3, #16
 80003a0:	6213      	str	r3, [r2, #32]

	// Mettre filtre IC2 : 0b10
	TIM4->CCMR1 &= ~TIM_CCMR1_IC2F_Msk;
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <init_capture+0x138>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a30      	ldr	r2, [pc, #192]	; (8000468 <init_capture+0x138>)
 80003a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80003ac:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= 0b0010 << TIM_CCMR1_IC2F_Pos; // N=4 pour downcounter
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <init_capture+0x138>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a2d      	ldr	r2, [pc, #180]	; (8000468 <init_capture+0x138>)
 80003b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003b8:	6193      	str	r3, [r2, #24]

	// Mettre le prescaler d'évènement : détecter un changement sur chaque front
	// capture is done each time an edge is detected on the capture input
	TIM4->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <init_capture+0x138>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <init_capture+0x138>)
 80003c0:	f023 030c 	bic.w	r3, r3, #12
 80003c4:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <init_capture+0x138>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <init_capture+0x138>)
 80003cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003d0:	6193      	str	r3, [r2, #24]

	// rediriger CC1 channel vers TI2 (valeur 2)
	TIM4->CCMR1 &= ~TIM_CCMR1_CC1S_Msk;
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <init_capture+0x138>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a24      	ldr	r2, [pc, #144]	; (8000468 <init_capture+0x138>)
 80003d8:	f023 0303 	bic.w	r3, r3, #3
 80003dc:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= 2 << TIM_CCMR1_CC1S_Pos;
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <init_capture+0x138>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a21      	ldr	r2, [pc, #132]	; (8000468 <init_capture+0x138>)
 80003e4:	f043 0302 	orr.w	r3, r3, #2
 80003e8:	6193      	str	r3, [r2, #24]

	// rediriger CC2 channel vers TI2 (valeur 1)
	TIM4->CCMR1 &= ~TIM_CCMR1_CC2S_Msk;
 80003ea:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <init_capture+0x138>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <init_capture+0x138>)
 80003f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003f4:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= 1 << TIM_CCMR1_CC2S_Pos;
 80003f6:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <init_capture+0x138>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <init_capture+0x138>)
 80003fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000400:	6193      	str	r3, [r2, #24]

	// mettre la détection de front
	TIM4->CCER &= ~(TIM_CCER_CC1NP_Msk | TIM_CCER_CC1P_Msk);
 8000402:	4b19      	ldr	r3, [pc, #100]	; (8000468 <init_capture+0x138>)
 8000404:	6a1b      	ldr	r3, [r3, #32]
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <init_capture+0x138>)
 8000408:	f023 030a 	bic.w	r3, r3, #10
 800040c:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(TIM_CCER_CC2NP_Msk | TIM_CCER_CC2P_Msk);
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <init_capture+0x138>)
 8000410:	6a1b      	ldr	r3, [r3, #32]
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <init_capture+0x138>)
 8000414:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000418:	6213      	str	r3, [r2, #32]

	// front montant, signal TI2FP1, qui sera lui aiguillé sur le signal IC1 : noninverted/riging edge : (0/0) CCR1
	// front descendant, signal TI2FP2, qui sera aiguillé sur le signal IC2 : inverted/falling edge : (0/1) CCR2
	TIM4->CCER |= TIM_CCER_CC2P;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <init_capture+0x138>)
 800041c:	6a1b      	ldr	r3, [r3, #32]
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <init_capture+0x138>)
 8000420:	f043 0320 	orr.w	r3, r3, #32
 8000424:	6213      	str	r3, [r2, #32]

	// activer la capture CC1 et CC2
	TIM4->CCER |= TIM_CCER_CC1E;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <init_capture+0x138>)
 8000428:	6a1b      	ldr	r3, [r3, #32]
 800042a:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <init_capture+0x138>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC2E;
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <init_capture+0x138>)
 8000434:	6a1b      	ldr	r3, [r3, #32]
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <init_capture+0x138>)
 8000438:	f043 0310 	orr.w	r3, r3, #16
 800043c:	6213      	str	r3, [r2, #32]

	// activer le compteur 1
	TIM4->CR1 |= TIM_CR1_CEN;
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <init_capture+0x138>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a09      	ldr	r2, [pc, #36]	; (8000468 <init_capture+0x138>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]

	// trigger force 0
    TIM4->EGR |= TIM_EGR_UG;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <init_capture+0x138>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a06      	ldr	r2, [pc, #24]	; (8000468 <init_capture+0x138>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6153      	str	r3, [r2, #20]
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40023800 	.word	0x40023800
 8000464:	40020400 	.word	0x40020400
 8000468:	40000800 	.word	0x40000800

0800046c <ex2_big_loop>:

void ex2_big_loop() {
 800046c:	b580      	push	{r7, lr}
 800046e:	b0bc      	sub	sp, #240	; 0xf0
 8000470:	af00      	add	r7, sp, #0

	// variables pwm
	uint16_t etapes = 4;
 8000472:	2304      	movs	r3, #4
 8000474:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
	uint16_t compteur = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
	uint8_t croissant = 0; // croissant premiere fois
 800047e:	2300      	movs	r3, #0
 8000480:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    uint32_t timespan;
    uint32_t time_overflow_ms;
    (void) time_overflow_ms;
	uint32_t time_diff_ms;
    (void) time_diff_ms;
    uint32_t overflow = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    uint16_t ccr1, ccr2;


    uint32_t bufferSize = 200;
 800048a:	23c8      	movs	r3, #200	; 0xc8
 800048c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    uint8_t buffer[200];
    for(uint32_t i = 0; i < bufferSize; ++i) buffer[i] = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000496:	e00a      	b.n	80004ae <ex2_big_loop+0x42>
 8000498:	463a      	mov	r2, r7
 800049a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800049e:	4413      	add	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80004a8:	3301      	adds	r3, #1
 80004aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80004ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80004b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d3ee      	bcc.n	8000498 <ex2_big_loop+0x2c>

    USART2_BigLoop_Transmit((uint8_t*) "La boulette\r\n", (uint8_t) sizeof("La boulette\r\n"));
 80004ba:	210e      	movs	r1, #14
 80004bc:	4862      	ldr	r0, [pc, #392]	; (8000648 <ex2_big_loop+0x1dc>)
 80004be:	f000 f9e1 	bl	8000884 <USART2_BigLoop_Transmit>
    USART2_BigLoop_Receive(buffer, bufferSize);
 80004c2:	463b      	mov	r3, r7
 80004c4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fa3b 	bl	8000944 <USART2_BigLoop_Receive>

	while(1) {
		// PWM update
		if(TIM5->SR & TIM_SR_UIF) { // a chaque update
 80004ce:	4b5f      	ldr	r3, [pc, #380]	; (800064c <ex2_big_loop+0x1e0>)
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d037      	beq.n	800054a <ex2_big_loop+0xde>
			if(compteur % etapes == 0) {
 80004da:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80004de:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 80004e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80004e6:	fb02 f201 	mul.w	r2, r2, r1
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d108      	bne.n	8000504 <ex2_big_loop+0x98>
				croissant = !croissant;
 80004f2:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	bf0c      	ite	eq
 80004fa:	2301      	moveq	r3, #1
 80004fc:	2300      	movne	r3, #0
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
			}

			if(croissant)
 8000504:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8000508:	2b00      	cmp	r3, #0
 800050a:	d005      	beq.n	8000518 <ex2_big_loop+0xac>
				++compteur;
 800050c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8000510:	3301      	adds	r3, #1
 8000512:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8000516:	e004      	b.n	8000522 <ex2_big_loop+0xb6>
			else
				--compteur;
 8000518:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800051c:	3b01      	subs	r3, #1
 800051e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee

			TIM2->CCR1 = compteur * TIM2->ARR / etapes;
 8000522:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8000526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800052c:	fb02 f203 	mul.w	r2, r2, r3
 8000530:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8000534:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000538:	fbb2 f3f3 	udiv	r3, r2, r3
 800053c:	634b      	str	r3, [r1, #52]	; 0x34

			// on clear l'interrupt flag d'update
			TIM5->SR = TIM5->SR & (~TIM_SR_UIF);
 800053e:	4b43      	ldr	r3, [pc, #268]	; (800064c <ex2_big_loop+0x1e0>)
 8000540:	691b      	ldr	r3, [r3, #16]
 8000542:	4a42      	ldr	r2, [pc, #264]	; (800064c <ex2_big_loop+0x1e0>)
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	6113      	str	r3, [r2, #16]
		}

		// capture
    	if(TIM4->SR & TIM_SR_UIF) {
 800054a:	4b41      	ldr	r3, [pc, #260]	; (8000650 <ex2_big_loop+0x1e4>)
 800054c:	691b      	ldr	r3, [r3, #16]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	2b00      	cmp	r3, #0
 8000554:	d010      	beq.n	8000578 <ex2_big_loop+0x10c>
    		++overflow;
 8000556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800055a:	3301      	adds	r3, #1
 800055c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    		if(overflow == UINT32_MAX) {
 8000560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000568:	d100      	bne.n	800056c <ex2_big_loop+0x100>
    			__NOP();
 800056a:	bf00      	nop
    		}

    		TIM4->SR &= ~TIM_SR_UIF;
 800056c:	4b38      	ldr	r3, [pc, #224]	; (8000650 <ex2_big_loop+0x1e4>)
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	4a37      	ldr	r2, [pc, #220]	; (8000650 <ex2_big_loop+0x1e4>)
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	6113      	str	r3, [r2, #16]
		}

    	if((TIM4->SR & TIM_SR_CC1IF))  {
 8000578:	4b35      	ldr	r3, [pc, #212]	; (8000650 <ex2_big_loop+0x1e4>)
 800057a:	691b      	ldr	r3, [r3, #16]
 800057c:	f003 0302 	and.w	r3, r3, #2
 8000580:	2b00      	cmp	r3, #0
 8000582:	d049      	beq.n	8000618 <ex2_big_loop+0x1ac>
    		// CCR1 est montant donc fin
    		ccr1 = TIM4->CCR1;
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <ex2_big_loop+0x1e4>)
 8000586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000588:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2


    		if(ccr1 > ccr2) {
 800058c:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8000590:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8000594:	429a      	cmp	r2, r3
 8000596:	d907      	bls.n	80005a8 <ex2_big_loop+0x13c>
    			timespan = ccr1 - ccr2;
 8000598:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 800059c:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80005a6:	e00f      	b.n	80005c8 <ex2_big_loop+0x15c>
    		} else {
    			overflow--;
 80005a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80005ac:	3b01      	subs	r3, #1
 80005ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    			timespan = (ccr1 + TIM4->ARR + 1) - ccr2;
 80005b2:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <ex2_big_loop+0x1e4>)
 80005b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ba:	441a      	add	r2, r3
 80005bc:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    		// pour faire court, un overflow dure (ARR+1) / (SystemCoreClock / (PSC + 1)) secondes (car on est en Hertz)

    		// ne pas changer le calcul optimisé
    		//in ms : (pulse*tim->PSC)/(SystemCoreClock/1000); // (pulse*1000/frequ)
    		time_overflow_ms = (overflow * TIM4->PSC+1) / (SystemCoreClock / 1000);
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <ex2_big_loop+0x1e4>)
 80005ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005cc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <ex2_big_loop+0x1e8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	491f      	ldr	r1, [pc, #124]	; (8000658 <ex2_big_loop+0x1ec>)
 80005dc:	fba1 1303 	umull	r1, r3, r1, r3
 80005e0:	099b      	lsrs	r3, r3, #6
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    		time_diff_ms = (timespan * TIM4->PSC+1) / (SystemCoreClock / 1000);
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <ex2_big_loop+0x1e4>)
 80005ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <ex2_big_loop+0x1e8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4916      	ldr	r1, [pc, #88]	; (8000658 <ex2_big_loop+0x1ec>)
 80005fe:	fba1 1303 	umull	r1, r3, r1, r3
 8000602:	099b      	lsrs	r3, r3, #6
 8000604:	fbb2 f3f3 	udiv	r3, r2, r3
 8000608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

			// clear CC1IF interrupt flag
			TIM4->SR &= ~TIM_SR_CC1IF;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <ex2_big_loop+0x1e4>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <ex2_big_loop+0x1e4>)
 8000612:	f023 0302 	bic.w	r3, r3, #2
 8000616:	6113      	str	r3, [r2, #16]
    	}

    	if((TIM4->SR & TIM_SR_CC2IF)) {
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <ex2_big_loop+0x1e4>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	2b00      	cmp	r3, #0
 8000622:	d00c      	beq.n	800063e <ex2_big_loop+0x1d2>
    		// CC2IF est ddescendant donc début

    		// restart the overflow counter
			overflow = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			// get the ccr2 value
    		ccr2 = TIM4->CCR2;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <ex2_big_loop+0x1e4>)
 800062c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800062e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2


			// clear CC1IF interrupt flag
			TIM4->SR &= ~TIM_SR_CC2IF;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <ex2_big_loop+0x1e4>)
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	4a06      	ldr	r2, [pc, #24]	; (8000650 <ex2_big_loop+0x1e4>)
 8000638:	f023 0304 	bic.w	r3, r3, #4
 800063c:	6113      	str	r3, [r2, #16]
		}

    	//usart
    	USART2_BigLoop_ReceiveBuffer();
 800063e:	f000 f9a5 	bl	800098c <USART2_BigLoop_ReceiveBuffer>
    	USART2_BigLoop_TransmitBuffer();
 8000642:	f000 f94f 	bl	80008e4 <USART2_BigLoop_TransmitBuffer>
	while(1) {
 8000646:	e742      	b.n	80004ce <ex2_big_loop+0x62>
 8000648:	08000a98 	.word	0x08000a98
 800064c:	40000c00 	.word	0x40000c00
 8000650:	40000800 	.word	0x40000800
 8000654:	20000000 	.word	0x20000000
 8000658:	10624dd3 	.word	0x10624dd3

0800065c <main>:
	}
}

int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	init_pwm();
 8000660:	f7ff fdb8 	bl	80001d4 <init_pwm>
	init_capture();
 8000664:	f7ff fe64 	bl	8000330 <init_capture>
	USART2_Init(115200);
 8000668:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800066c:	f000 f83c 	bl	80006e8 <USART2_Init>

	ex2_big_loop();
 8000670:	f7ff fefc 	bl	800046c <ex2_big_loop>
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x60>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <SystemInit+0x60>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <SystemInit+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <SystemInit+0x64>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <SystemInit+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x64>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <SystemInit+0x64>)
 80006a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <SystemInit+0x64>)
 80006b4:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <SystemInit+0x68>)
 80006b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <SystemInit+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <SystemInit+0x64>)
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SystemInit+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x60>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#endif
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	40023800 	.word	0x40023800
 80006e4:	24003010 	.word	0x24003010

080006e8 <USART2_Init>:
  * @brief  Init USART2 @ baud,8,1,n
  * @param  baud rate
  * @retval None
  * */
void USART2_Init(uint32_t baud)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	// 1. Configuration des GPIOs
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80006f0:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <USART2_Init+0x138>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	4a4a      	ldr	r2, [pc, #296]	; (8000820 <USART2_Init+0x138>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0x000000A0;
 80006fc:	4b49      	ldr	r3, [pc, #292]	; (8000824 <USART2_Init+0x13c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a48      	ldr	r2, [pc, #288]	; (8000824 <USART2_Init+0x13c>)
 8000702:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000706:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8000708:	4b46      	ldr	r3, [pc, #280]	; (8000824 <USART2_Init+0x13c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a45      	ldr	r2, [pc, #276]	; (8000824 <USART2_Init+0x13c>)
 800070e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000712:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8000714:	4b43      	ldr	r3, [pc, #268]	; (8000824 <USART2_Init+0x13c>)
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	4a42      	ldr	r2, [pc, #264]	; (8000824 <USART2_Init+0x13c>)
 800071a:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
 800071e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8000720:	4b40      	ldr	r3, [pc, #256]	; (8000824 <USART2_Init+0x13c>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	4a3f      	ldr	r2, [pc, #252]	; (8000824 <USART2_Init+0x13c>)
 8000726:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800072a:	6213      	str	r3, [r2, #32]

	uint32_t tmp = 0, divmantissa, divfraction, apbclk;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]

	/* initialisation de l'USART2 : baud,8,1,n */

	/* reset/de-reset USART2 */
	RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 8000730:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <USART2_Init+0x138>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a3a      	ldr	r2, [pc, #232]	; (8000820 <USART2_Init+0x138>)
 8000736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073a:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 800073c:	4b38      	ldr	r3, [pc, #224]	; (8000820 <USART2_Init+0x138>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a37      	ldr	r2, [pc, #220]	; (8000820 <USART2_Init+0x138>)
 8000742:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000746:	6213      	str	r3, [r2, #32]
	/* enable USART2 clk */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <USART2_Init+0x138>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a34      	ldr	r2, [pc, #208]	; (8000820 <USART2_Init+0x138>)
 800074e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40

	/*-------------- UART parameters configuration --------------- */
	USART2->CR1 &= ~USART_CR1_UE;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <USART2_Init+0x140>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4a33      	ldr	r2, [pc, #204]	; (8000828 <USART2_Init+0x140>)
 800075a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800075e:	60d3      	str	r3, [r2, #12]
	/* USART CR1 Configuration : tx and rx enable; oversampling = 16 */
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <USART2_Init+0x140>)
 8000762:	220c      	movs	r2, #12
 8000764:	60da      	str	r2, [r3, #12]
	/* USART CR2 Configuration : 1 stop bit*/
	USART2->CR2 = 0 ;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <USART2_Init+0x140>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
	/* USART CR3 Configuration : no flow control*/
	USART2->CR3 = 0;
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <USART2_Init+0x140>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
	/* USART BRR Configuration : depend on the bus frequency*/
	/* get APB1 prescaler to determine the USART clock frequency apbclk*/
	tmp = (RCC->CFGR & RCC_CFGR_PPRE1)>>10;
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <USART2_Init+0x138>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	0a9b      	lsrs	r3, r3, #10
 8000778:	f003 0307 	and.w	r3, r3, #7
 800077c:	60bb      	str	r3, [r7, #8]
	if (tmp & 4){
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <USART2_Init+0xb8>
		tmp =  (tmp & 3) + 1;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	f003 0303 	and.w	r3, r3, #3
 800078e:	3301      	adds	r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
		apbclk = SystemCoreClock >> tmp;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <USART2_Init+0x144>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	fa22 f303 	lsr.w	r3, r2, r3
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e002      	b.n	80007a6 <USART2_Init+0xbe>
	}
	else {
		apbclk = SystemCoreClock;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <USART2_Init+0x144>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
	}

	/* Tx/Rx baud = apbclk /(8*(2-OVER8)*USARTDIV) */
	tmp = (USART2->CR1 & USART_CR1_OVER8)>>15;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <USART2_Init+0x140>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	0bdb      	lsrs	r3, r3, #15
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
	if (tmp == 0) {
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10d      	bne.n	80007d4 <USART2_Init+0xec>
		/* OVER8 = 0, div by 16 */
		divmantissa = (apbclk/baud) >> 4;
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c0:	091b      	lsrs	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
		divfraction = (apbclk/baud) & 0xF;
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007cc:	f003 030f 	and.w	r3, r3, #15
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	e00c      	b.n	80007ee <USART2_Init+0x106>
	}
	else {
		/* OVER8 = 1, div by 8 */
		divmantissa = (apbclk/baud) >> 3;
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	617b      	str	r3, [r7, #20]
		divfraction = (apbclk/baud) & 3;
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	613b      	str	r3, [r7, #16]
	}
	/*USART2->BRR = mantissa and fraction part*/
	USART2->BRR = (divmantissa << 4) | divfraction ;
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	011a      	lsls	r2, r3, #4
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <USART2_Init+0x140>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	608b      	str	r3, [r1, #8]


	/* enable USART */
	USART2->CR1 |= USART_CR1_UE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <USART2_Init+0x140>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <USART2_Init+0x140>)
 8000800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000804:	60d3      	str	r3, [r2, #12]

	/* clear TC */
	USART2->SR |= USART_SR_TC;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <USART2_Init+0x140>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <USART2_Init+0x140>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6013      	str	r3, [r2, #0]

	/*-------------- interrupt --------------- */
	//NVIC_SetPriority(USART2_IRQn,0x15); /*  priority */
	//NVIC_EnableIRQ(USART2_IRQn);
}
 8000812:	bf00      	nop
 8000814:	371c      	adds	r7, #28
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40004400 	.word	0x40004400
 800082c:	20000000 	.word	0x20000000

08000830 <USART2_BigLoop_sendChar>:
/**
 * @brief Transmits a single char
 * @param ch the character to send
 * @retval returns 0 if sent, 1 else
 */
uint8_t USART2_BigLoop_sendChar(uint8_t ch) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	if((USART2->SR & USART_SR_TXE) == 0) {
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <USART2_BigLoop_sendChar+0x30>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <USART2_BigLoop_sendChar+0x1a>
		return 1;
 8000846:	2301      	movs	r3, #1
 8000848:	e003      	b.n	8000852 <USART2_BigLoop_sendChar+0x22>
	}

	// on écrit la valeur dans DR
	USART2->DR = ch;
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <USART2_BigLoop_sendChar+0x30>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	6053      	str	r3, [r2, #4]
	return 0;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40004400 	.word	0x40004400

08000864 <USART2_BigLoop_isCharSent>:

/**
 * @brief returns if char has been sent (TC flag)
 * @retval 1 if sent, 0 else
 */
uint8_t USART2_BigLoop_isCharSent() {
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
//	0: Transmission is not complete
//	1: Transmission is complete
	return (USART2->SR & USART_SR_TC) >> USART_SR_TC_Pos;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <USART2_BigLoop_isCharSent+0x1c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	099b      	lsrs	r3, r3, #6
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	40004400 	.word	0x40004400

08000884 <USART2_BigLoop_Transmit>:
 * @brief Set transmit buffer
 * @param data Data pointer to send
 * @param length Data size in bytes
 * @retval returns 0 if changed the buffer, 1 if parameter error
 */
uint8_t USART2_BigLoop_Transmit(uint8_t * data, uint32_t length) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	// reject if invalid pointer or changed to different pointer when not finished
	if(data == NULL || (data_pointer != NULL && data != data_pointer && data_index < data_length))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00e      	beq.n	80008b2 <USART2_BigLoop_Transmit+0x2e>
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <USART2_BigLoop_Transmit+0x54>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00c      	beq.n	80008b6 <USART2_BigLoop_Transmit+0x32>
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <USART2_BigLoop_Transmit+0x54>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d007      	beq.n	80008b6 <USART2_BigLoop_Transmit+0x32>
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <USART2_BigLoop_Transmit+0x58>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <USART2_BigLoop_Transmit+0x5c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d201      	bcs.n	80008b6 <USART2_BigLoop_Transmit+0x32>
		return 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e009      	b.n	80008ca <USART2_BigLoop_Transmit+0x46>

	data_pointer = data;
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <USART2_BigLoop_Transmit+0x54>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6013      	str	r3, [r2, #0]
	data_index = 0;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <USART2_BigLoop_Transmit+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	data_length = length;
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <USART2_BigLoop_Transmit+0x5c>)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	6013      	str	r3, [r2, #0]

	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000020 	.word	0x20000020
 80008dc:	20000024 	.word	0x20000024
 80008e0:	20000028 	.word	0x20000028

080008e4 <USART2_BigLoop_TransmitBuffer>:

/**
 * @brief gradually transmits buffer
 * @retval returns 0 if char was sent, !=0 else
 */
uint8_t USART2_BigLoop_TransmitBuffer() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	// if ended, nothing was sent or if the last char was not sent
	if(data_index == data_length || (!USART2_BigLoop_isCharSent()))
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <USART2_BigLoop_TransmitBuffer+0x54>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <USART2_BigLoop_TransmitBuffer+0x58>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d004      	beq.n	8000900 <USART2_BigLoop_TransmitBuffer+0x1c>
 80008f6:	f7ff ffb5 	bl	8000864 <USART2_BigLoop_isCharSent>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <USART2_BigLoop_TransmitBuffer+0x20>
		return 1;
 8000900:	2301      	movs	r3, #1
 8000902:	e015      	b.n	8000930 <USART2_BigLoop_TransmitBuffer+0x4c>

	// try to send the current char
	uint8_t ret = USART2_BigLoop_sendChar(data_pointer[data_index]);
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <USART2_BigLoop_TransmitBuffer+0x5c>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <USART2_BigLoop_TransmitBuffer+0x54>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff8d 	bl	8000830 <USART2_BigLoop_sendChar>
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]

	// if char not sent, return return value
	if(ret != 0)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <USART2_BigLoop_TransmitBuffer+0x40>
		return ret;
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	e005      	b.n	8000930 <USART2_BigLoop_TransmitBuffer+0x4c>

	// else it was
	++data_index;
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <USART2_BigLoop_TransmitBuffer+0x54>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a03      	ldr	r2, [pc, #12]	; (8000938 <USART2_BigLoop_TransmitBuffer+0x54>)
 800092c:	6013      	str	r3, [r2, #0]

	return ret;
 800092e:	79fb      	ldrb	r3, [r7, #7]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000024 	.word	0x20000024
 800093c:	20000028 	.word	0x20000028
 8000940:	20000020 	.word	0x20000020

08000944 <USART2_BigLoop_Receive>:
 * @brief Set up receive buffer
 * @param data Data pointer to receive
 * @param length Data size in bytes
 * @retval returns 0 if setted up buffer, !=0 else
 */
uint8_t USART2_BigLoop_Receive(uint8_t * data, uint32_t length) {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	// reject if invalid pointer or changed to different pointer when not finished
	if(data == NULL || length == 0)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <USART2_BigLoop_Receive+0x16>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <USART2_BigLoop_Receive+0x1a>
		return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e009      	b.n	8000972 <USART2_BigLoop_Receive+0x2e>

	receive_buffer = data;
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <USART2_BigLoop_Receive+0x3c>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6013      	str	r3, [r2, #0]
	receive_index = 0;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <USART2_BigLoop_Receive+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
	receive_length = length;
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <USART2_BigLoop_Receive+0x44>)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6013      	str	r3, [r2, #0]

	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000002c 	.word	0x2000002c
 8000984:	20000034 	.word	0x20000034
 8000988:	20000030 	.word	0x20000030

0800098c <USART2_BigLoop_ReceiveBuffer>:

/**
 * @brief gradually receive buffer
 * @retval returns 0 if char was receive, !=0 else
 */
uint8_t USART2_BigLoop_ReceiveBuffer() {
 800098c:	b490      	push	{r4, r7}
 800098e:	af00      	add	r7, sp, #0
	// if full nope
	if(receive_index == receive_length)
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <USART2_BigLoop_ReceiveBuffer+0x48>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <USART2_BigLoop_ReceiveBuffer+0x4c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d101      	bne.n	80009a0 <USART2_BigLoop_ReceiveBuffer+0x14>
		return 1;
 800099c:	2301      	movs	r3, #1
 800099e:	e014      	b.n	80009ca <USART2_BigLoop_ReceiveBuffer+0x3e>

	// if empty nope
	if((USART2->SR & USART_SR_RXNE) == 0)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <USART2_BigLoop_ReceiveBuffer+0x50>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0320 	and.w	r3, r3, #32
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <USART2_BigLoop_ReceiveBuffer+0x24>
		return 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e00c      	b.n	80009ca <USART2_BigLoop_ReceiveBuffer+0x3e>

	// get it
	receive_buffer[receive_index++] = (USART2->DR & 0xFF);
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <USART2_BigLoop_ReceiveBuffer+0x50>)
 80009b2:	685c      	ldr	r4, [r3, #4]
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <USART2_BigLoop_ReceiveBuffer+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <USART2_BigLoop_ReceiveBuffer+0x48>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c59      	adds	r1, r3, #1
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <USART2_BigLoop_ReceiveBuffer+0x48>)
 80009c0:	6001      	str	r1, [r0, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	b2e2      	uxtb	r2, r4
 80009c6:	701a      	strb	r2, [r3, #0]

	// get out
	return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc90      	pop	{r4, r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000034 	.word	0x20000034
 80009d8:	20000030 	.word	0x20000030
 80009dc:	40004400 	.word	0x40004400
 80009e0:	2000002c 	.word	0x2000002c

080009e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e8:	f7ff fe48 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a12:	f000 f811 	bl	8000a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fe21 	bl	800065c <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   r0, =_estack
 8000a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a28:	08000ab0 	.word	0x08000ab0
  ldr r2, =_sbss
 8000a2c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a30:	20000038 	.word	0x20000038

08000a34 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <__libc_init_array>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	4d0d      	ldr	r5, [pc, #52]	; (8000a70 <__libc_init_array+0x38>)
 8000a3c:	4c0d      	ldr	r4, [pc, #52]	; (8000a74 <__libc_init_array+0x3c>)
 8000a3e:	1b64      	subs	r4, r4, r5
 8000a40:	10a4      	asrs	r4, r4, #2
 8000a42:	2600      	movs	r6, #0
 8000a44:	42a6      	cmp	r6, r4
 8000a46:	d109      	bne.n	8000a5c <__libc_init_array+0x24>
 8000a48:	4d0b      	ldr	r5, [pc, #44]	; (8000a78 <__libc_init_array+0x40>)
 8000a4a:	4c0c      	ldr	r4, [pc, #48]	; (8000a7c <__libc_init_array+0x44>)
 8000a4c:	f000 f818 	bl	8000a80 <_init>
 8000a50:	1b64      	subs	r4, r4, r5
 8000a52:	10a4      	asrs	r4, r4, #2
 8000a54:	2600      	movs	r6, #0
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d105      	bne.n	8000a66 <__libc_init_array+0x2e>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a60:	4798      	blx	r3
 8000a62:	3601      	adds	r6, #1
 8000a64:	e7ee      	b.n	8000a44 <__libc_init_array+0xc>
 8000a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6a:	4798      	blx	r3
 8000a6c:	3601      	adds	r6, #1
 8000a6e:	e7f2      	b.n	8000a56 <__libc_init_array+0x1e>
 8000a70:	08000aa8 	.word	0x08000aa8
 8000a74:	08000aa8 	.word	0x08000aa8
 8000a78:	08000aa8 	.word	0x08000aa8
 8000a7c:	08000aac 	.word	0x08000aac

08000a80 <_init>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr

08000a8c <_fini>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	bf00      	nop
 8000a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a92:	bc08      	pop	{r3}
 8000a94:	469e      	mov	lr, r3
 8000a96:	4770      	bx	lr
